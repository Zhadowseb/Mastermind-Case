import java.util.ArrayList;

public class GuessPattern {

    private Initialising in = new Initialising();
    private Main main = new Main();

    public static ArrayList<Pegs> guess = new ArrayList<>();
    private ArrayList<Pegs> guessResponse = new ArrayList<>();

    /* Tries to guess the set pattern, and returns true, if it was solved.

    To do this efficiently, I would have to implement the minimax algorithm, which I have never worked with before,
    and would have to study more, to implement it correctly.

    The algorithm will predict the best possible next step. This would be done with recursion in the guessPattern method,
    where the algorithm would continually be called, until the best next step is found.

    I'm also pretty sure this can be solved with minimax and just numbers instead of object oriented, but I was told
    That was the main thing that was required for the position, which is why I decided to do it this way.
     */
    public Boolean guessPattern(){

        for(int attempts = 1; 1 <= 10; attempts++){
            /* Here minimax would be applied recursively to find the next best combination of four colors, to find the answer fastest.
            if minimax is used correctly it could be done within five rows every time.
            The guess would then be put into the "guess" array, so it can be used in the compareAnswer function*/


            guessResponse = in.compareAnswer(guess, main.patternToGuess);

            if(guessResponse.size() == 4 && allResponsePegsRed(guessResponse) == true){
                System.out.println("You win!");
                break;
            }
        }
        return false;
    }

    //Returns true if a guess returns four red pegs, thereby winning the game.
    public Boolean allResponsePegsRed(ArrayList<Pegs> listOfResponsePegs){
        for(int i = 0; i < listOfResponsePegs.size(); i++){
            if(listOfResponsePegs.get(i).equals(in.whitePeg)){
                return false;
            }
        }
        return true;
    }
}
